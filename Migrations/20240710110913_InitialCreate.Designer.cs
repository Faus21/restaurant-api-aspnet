// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RestaurantApp.Models;

#nullable disable

namespace RestaurantApp.Migrations
{
    [DbContext(typeof(RestaurantDbContext))]
    [Migration("20240710110913_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RestaurantApp.Models.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CityId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("CityId")
                        .HasName("City_pk");

                    b.ToTable("City", (string)null);

                    b.HasData(
                        new
                        {
                            CityId = 1,
                            Name = "Paris"
                        },
                        new
                        {
                            CityId = 2,
                            Name = "Warsaw"
                        });
                });

            modelBuilder.Entity("RestaurantApp.Models.Client", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ClientId"));

                    b.Property<int>("PersonId")
                        .HasColumnType("integer");

                    b.HasKey("ClientId")
                        .HasName("Client_pk");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("Client", (string)null);

                    b.HasData(
                        new
                        {
                            ClientId = 1,
                            PersonId = 2
                        });
                });

            modelBuilder.Entity("RestaurantApp.Models.Dish", b =>
                {
                    b.Property<int>("DishId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DishId"));

                    b.Property<string>("DishName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("DishId")
                        .HasName("Dish_pk");

                    b.ToTable("Dish", (string)null);

                    b.HasData(
                        new
                        {
                            DishId = 1,
                            DishName = "Tomato Soup"
                        },
                        new
                        {
                            DishId = 2,
                            DishName = "Fries"
                        });
                });

            modelBuilder.Entity("RestaurantApp.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<int>("ClientId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("WorkerId")
                        .HasColumnType("integer");

                    b.HasKey("OrderId")
                        .HasName("Order_pk");

                    b.ToTable("Order", (string)null);

                    b.HasData(
                        new
                        {
                            OrderId = 1,
                            ClientId = 1,
                            OrderDate = new DateTime(2024, 7, 10, 11, 9, 13, 208, DateTimeKind.Utc).AddTicks(378),
                            WorkerId = 1
                        });
                });

            modelBuilder.Entity("RestaurantApp.Models.OrderDish", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<int>("DishId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("OrderId", "DishId")
                        .HasName("OrderDish_pk");

                    b.HasIndex("DishId");

                    b.ToTable("OrderDish", (string)null);

                    b.HasData(
                        new
                        {
                            OrderId = 1,
                            DishId = 1,
                            Quantity = 4
                        },
                        new
                        {
                            OrderId = 1,
                            DishId = 2,
                            Quantity = 2
                        });
                });

            modelBuilder.Entity("RestaurantApp.Models.Person", b =>
                {
                    b.Property<int>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PersonId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("PersonId")
                        .HasName("Person_pk");

                    b.ToTable("Person", (string)null);

                    b.HasData(
                        new
                        {
                            PersonId = 1,
                            Email = "john@example.com",
                            Name = "John",
                            PhoneNumber = "1111111111",
                            Surname = "Example"
                        },
                        new
                        {
                            PersonId = 2,
                            Email = "lola@example.com",
                            Name = "Lola",
                            PhoneNumber = "1111111112",
                            Surname = "Example"
                        });
                });

            modelBuilder.Entity("RestaurantApp.Models.Restaurant", b =>
                {
                    b.Property<int>("RestaurantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RestaurantId"));

                    b.Property<int>("CityId")
                        .HasColumnType("integer");

                    b.Property<int>("Places")
                        .HasColumnType("integer");

                    b.HasKey("RestaurantId")
                        .HasName("Restaurant_pk");

                    b.HasIndex("CityId");

                    b.ToTable("Restaurant", (string)null);

                    b.HasData(
                        new
                        {
                            RestaurantId = 1,
                            CityId = 1,
                            Places = 50
                        },
                        new
                        {
                            RestaurantId = 2,
                            CityId = 2,
                            Places = 120
                        });
                });

            modelBuilder.Entity("RestaurantApp.Models.RestaurantWorker", b =>
                {
                    b.Property<int>("RestaurantWorkerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RestaurantWorkerId"));

                    b.Property<DateOnly?>("DismissalDate")
                        .HasColumnType("date");

                    b.Property<DateOnly>("HireDate")
                        .HasColumnType("date");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("integer");

                    b.Property<int>("WorkerId")
                        .HasColumnType("integer");

                    b.HasKey("RestaurantWorkerId")
                        .HasName("RestaurantWorker_pk");

                    b.HasIndex("WorkerId");

                    b.ToTable("RestaurantWorker", (string)null);

                    b.HasData(
                        new
                        {
                            RestaurantWorkerId = 1,
                            DismissalDate = new DateOnly(9999, 12, 31),
                            HireDate = new DateOnly(1, 1, 1),
                            RestaurantId = 1,
                            WorkerId = 1
                        },
                        new
                        {
                            RestaurantWorkerId = 2,
                            HireDate = new DateOnly(1, 1, 1),
                            RestaurantId = 2,
                            WorkerId = 1
                        });
                });

            modelBuilder.Entity("RestaurantApp.Models.Worker", b =>
                {
                    b.Property<int>("WorkerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("WorkerId"));

                    b.Property<int>("PersonId")
                        .HasColumnType("integer");

                    b.HasKey("WorkerId")
                        .HasName("Worker_pk");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("Worker", (string)null);

                    b.HasData(
                        new
                        {
                            WorkerId = 1,
                            PersonId = 1
                        });
                });

            modelBuilder.Entity("RestaurantApp.Models.Client", b =>
                {
                    b.HasOne("RestaurantApp.Models.Person", "Person")
                        .WithOne("Client")
                        .HasForeignKey("RestaurantApp.Models.Client", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Client_Person");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("RestaurantApp.Models.Order", b =>
                {
                    b.HasOne("RestaurantApp.Models.Client", "Client")
                        .WithMany("Orders")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Order_Client");

                    b.HasOne("RestaurantApp.Models.Worker", "Worker")
                        .WithMany("Orders")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Order_Worker");

                    b.Navigation("Client");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("RestaurantApp.Models.OrderDish", b =>
                {
                    b.HasOne("RestaurantApp.Models.Dish", "Dish")
                        .WithMany("OrderDishes")
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RestaurantApp.Models.Order", "Order")
                        .WithMany("OrderDishes")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("RestaurantApp.Models.Restaurant", b =>
                {
                    b.HasOne("RestaurantApp.Models.City", "City")
                        .WithMany("Restaurants")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("Restaurant_City");

                    b.Navigation("City");
                });

            modelBuilder.Entity("RestaurantApp.Models.RestaurantWorker", b =>
                {
                    b.HasOne("RestaurantApp.Models.Restaurant", "Restaurant")
                        .WithMany("RestaurantWorkers")
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("RestaurantWorker_Restaurant");

                    b.HasOne("RestaurantApp.Models.Worker", "Worker")
                        .WithMany("RestaurantWorkers")
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("RestaurantWorker_Worker");

                    b.Navigation("Restaurant");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("RestaurantApp.Models.Worker", b =>
                {
                    b.HasOne("RestaurantApp.Models.Person", "Person")
                        .WithOne("Worker")
                        .HasForeignKey("RestaurantApp.Models.Worker", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Worker_Person");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("RestaurantApp.Models.City", b =>
                {
                    b.Navigation("Restaurants");
                });

            modelBuilder.Entity("RestaurantApp.Models.Client", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("RestaurantApp.Models.Dish", b =>
                {
                    b.Navigation("OrderDishes");
                });

            modelBuilder.Entity("RestaurantApp.Models.Order", b =>
                {
                    b.Navigation("OrderDishes");
                });

            modelBuilder.Entity("RestaurantApp.Models.Person", b =>
                {
                    b.Navigation("Client");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("RestaurantApp.Models.Restaurant", b =>
                {
                    b.Navigation("RestaurantWorkers");
                });

            modelBuilder.Entity("RestaurantApp.Models.Worker", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("RestaurantWorkers");
                });
#pragma warning restore 612, 618
        }
    }
}
